/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

syntax = "proto3";
package teaclave_scheduler_service_proto;

import "teaclave_common.proto";

message SubscribeRequest {}
message SubscribeResponse {
  bool success = 1;
}

message HeartbeatRequest {
  string executor_id = 1;
  teaclave_common_proto.ExecutorStatus status = 2;
}
message HeartbeatResponse {
  teaclave_common_proto.ExecutorCommand command = 1;
}

message PullTaskRequest {
  string executor_id = 1;
}
message PullTaskResponse {
  bytes staged_task = 1;
}

message UpdateTaskStatusRequest {
  string task_id = 1;
  teaclave_common_proto.TaskStatus task_status = 2;
}
message UpdateTaskStatusResponse {}

message UpdateTaskResultRequest {
  string task_id = 1;
  teaclave_common_proto.TaskResult result = 2;
}
message UpdateTaskResultResponse {}

message PublishTaskRequest {
  bytes staged_task = 1;
}
message PublishTaskResponse {}

service TeaclaveScheduler {
  // Publisher
  rpc PublishTask(PublishTaskRequest) returns (PublishTaskResponse);

  // Subscriber
  rpc Subscribe(SubscribeRequest) returns (SubscribeResponse);
  rpc PullTask(PullTaskRequest) returns (PullTaskResponse);

  rpc UpdateTaskStatus(UpdateTaskStatusRequest) returns (UpdateTaskStatusResponse);
  rpc UpdateTaskResult(UpdateTaskResultRequest) returns (UpdateTaskResultResponse);

  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}
